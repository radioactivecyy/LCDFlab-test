////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : disp_num_drc.vf
// /___/   /\     Timestamp : 11/03/2021 14:45:03
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: C:\XilinxISE\14.7\ISE_DS\ISE\bin\nt64\unwrapped\sch2hdl.exe -intstyle ise -family kintex7 -verilog disp_num_drc.vf -w D:/lab7/ScoreBoard/disp_num.sch
//Design Name: disp_num
//Device: kintex7
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale  100 ps / 10 ps

module INV4_HXILINX_disp_num (O0, O1, O2, O3, I0, I1, I2, I3);
    

   output O0;
   output O1;
   output O2;
   output O3;

   input  I0;
   input  I1;
   input  I2;
   input  I3;

assign O0 = !I0;
assign O1 = !I1;
assign O2 = !I2;
assign O3 = !I3;

endmodule
`timescale  100 ps / 10 ps

module D2_4E_HXILINX_disp_num (D0, D1, D2, D3, A0, A1, E);
    

   output D0;
   output D1;
   output D2;
   output D3;

   input  A0;
   input  A1;
   input  E;
  
   reg D0;
   reg D1;
   reg D2;
   reg D3;

      always @ (A0 or A1 or E)
      begin
         if(!E)
           {D3, D2, D1, D0} <= 4'b0000;
        else
        begin
           case({A1,A0})
             2'b00 : {D3,D2,D1,D0} <= 4'b0001;
             2'b01 : {D3,D2,D1,D0} <= 4'b0010;
             2'b10 : {D3,D2,D1,D0} <= 4'b0100;
             2'b11 : {D3,D2,D1,D0} <= 4'b1000;
          endcase
        end
     end 

endmodule
`timescale 1ns / 1ps

module MyMC14495_MUSER_disp_num(D0, 
                                D1, 
                                D2, 
                                D3, 
                                LE, 
                                point, 
                                a, 
                                b, 
                                c, 
                                d, 
                                e, 
                                f, 
                                g, 
                                p);

    input D0;
    input D1;
    input D2;
    input D3;
    input LE;
    input point;
   output a;
   output b;
   output c;
   output d;
   output e;
   output f;
   output g;
   output p;
   
   wire XLXN_32;
   wire XLXN_33;
   wire XLXN_34;
   wire XLXN_36;
   wire XLXN_37;
   wire XLXN_38;
   wire XLXN_39;
   wire XLXN_40;
   wire XLXN_41;
   wire XLXN_42;
   wire XLXN_46;
   wire XLXN_47;
   wire XLXN_48;
   wire XLXN_49;
   wire XLXN_51;
   wire XLXN_52;
   wire XLXN_53;
   wire XLXN_54;
   wire XLXN_55;
   wire XLXN_56;
   wire XLXN_59;
   wire XLXN_60;
   wire XLXN_62;
   wire XLXN_63;
   wire XLXN_64;
   wire XLXN_65;
   wire XLXN_66;
   wire XLXN_67;
   wire XLXN_68;
   wire XLXN_69;
   wire XLXN_70;
   wire XLXN_77;
   
   AND4  AD0 (.I0(XLXN_36), 
             .I1(XLXN_34), 
             .I2(D2), 
             .I3(D3), 
             .O(XLXN_64));
   AND4  AD1 (.I0(D0), 
             .I1(D1), 
             .I2(D2), 
             .I3(XLXN_33), 
             .O(XLXN_63));
   AND3  AD2 (.I0(XLXN_34), 
             .I1(XLXN_32), 
             .I2(XLXN_33), 
             .O(XLXN_62));
   AND3  AD3 (.I0(D0), 
             .I1(D1), 
             .I2(XLXN_33), 
             .O(XLXN_60));
   AND3  AD4 (.I0(D1), 
             .I1(XLXN_32), 
             .I2(XLXN_33), 
             .O(XLXN_59));
   AND3  AD5 (.I0(D0), 
             .I1(XLXN_32), 
             .I2(XLXN_33), 
             .O(XLXN_56));
   AND3  AD6 (.I0(D0), 
             .I1(XLXN_34), 
             .I2(XLXN_32), 
             .O(XLXN_55));
   AND3  AD7 (.I0(XLXN_34), 
             .I1(D2), 
             .I2(XLXN_33), 
             .O(XLXN_54));
   AND2  AD8 (.I0(D0), 
             .I1(XLXN_33), 
             .O(XLXN_53));
   AND4  AD9 (.I0(XLXN_36), 
             .I1(D1), 
             .I2(XLXN_32), 
             .I3(D3), 
             .O(XLXN_52));
   AND3  AD10 (.I0(D0), 
              .I1(D1), 
              .I2(D2), 
              .O(XLXN_51));
   AND3  AD11 (.I0(D1), 
              .I1(D2), 
              .I2(D3), 
              .O(XLXN_49));
   AND4  AD12 (.I0(XLXN_36), 
              .I1(D1), 
              .I2(XLXN_32), 
              .I3(XLXN_33), 
              .O(XLXN_48));
   AND3  AD13 (.I0(D0), 
              .I1(D1), 
              .I2(D3), 
              .O(XLXN_47));
   AND3  AD14 (.I0(XLXN_36), 
              .I1(D2), 
              .I2(D3), 
              .O(XLXN_46));
   AND3  AD15 (.I0(XLXN_36), 
              .I1(D1), 
              .I2(D2), 
              .O(XLXN_42));
   AND4  AD16 (.I0(D0), 
              .I1(XLXN_34), 
              .I2(D2), 
              .I3(XLXN_33), 
              .O(XLXN_41));
   AND4  AD17 (.I0(D0), 
              .I1(D1), 
              .I2(XLXN_32), 
              .I3(D3), 
              .O(XLXN_40));
   AND4  AD18 (.I0(D0), 
              .I1(XLXN_34), 
              .I2(D2), 
              .I3(D3), 
              .O(XLXN_39));
   AND4  AD19 (.I0(XLXN_36), 
              .I1(XLXN_34), 
              .I2(D2), 
              .I3(XLXN_33), 
              .O(XLXN_38));
   AND4  AD20 (.I0(D0), 
              .I1(XLXN_34), 
              .I2(XLXN_32), 
              .I3(XLXN_33), 
              .O(XLXN_37));
   INV  XLXI_2 (.I(D0), 
               .O(XLXN_36));
   INV  XLXI_3 (.I(D1), 
               .O(XLXN_34));
   INV  XLXI_4 (.I(D2), 
               .O(XLXN_32));
   INV  XLXI_5 (.I(D3), 
               .O(XLXN_33));
   OR4  XLXI_79 (.I0(XLXN_40), 
                .I1(XLXN_39), 
                .I2(XLXN_38), 
                .I3(XLXN_37), 
                .O(XLXN_65));
   OR4  XLXI_80 (.I0(XLXN_47), 
                .I1(XLXN_46), 
                .I2(XLXN_42), 
                .I3(XLXN_41), 
                .O(XLXN_66));
   OR4  XLXI_81 (.I0(XLXN_52), 
                .I1(XLXN_51), 
                .I2(XLXN_38), 
                .I3(XLXN_37), 
                .O(XLXN_68));
   OR4  XLXI_82 (.I0(XLXN_60), 
                .I1(XLXN_59), 
                .I2(XLXN_56), 
                .I3(XLXN_39), 
                .O(XLXN_70));
   OR3  XLXI_83 (.I0(XLXN_49), 
                .I1(XLXN_48), 
                .I2(XLXN_46), 
                .O(XLXN_67));
   OR3  XLXI_84 (.I0(XLXN_55), 
                .I1(XLXN_54), 
                .I2(XLXN_53), 
                .O(XLXN_69));
   OR3  XLXI_85 (.I0(XLXN_64), 
                .I1(XLXN_63), 
                .I2(XLXN_62), 
                .O(XLXN_77));
   OR2  XLXI_86 (.I0(LE), 
                .I1(XLXN_65), 
                .O(a));
   OR2  XLXI_87 (.I0(LE), 
                .I1(XLXN_66), 
                .O(b));
   OR2  XLXI_88 (.I0(LE), 
                .I1(XLXN_67), 
                .O(c));
   OR2  XLXI_89 (.I0(LE), 
                .I1(XLXN_68), 
                .O(d));
   OR2  XLXI_90 (.I0(LE), 
                .I1(XLXN_69), 
                .O(e));
   OR2  XLXI_91 (.I0(LE), 
                .I1(XLXN_70), 
                .O(f));
   OR2  XLXI_92 (.I0(LE), 
                .I1(XLXN_77), 
                .O(g));
   INV  XLXI_100 (.I(point), 
                 .O(p));
endmodule
`timescale 1ns / 1ps

module MUX4to1_MUSER_disp_num(I0, 
                              I1, 
                              I2, 
                              I3, 
                              s, 
                              o);

    input I0;
    input I1;
    input I2;
    input I3;
    input [1:0] s;
   output o;
   
   wire XLXN_1;
   wire XLXN_3;
   wire XLXN_11;
   wire XLXN_12;
   wire XLXN_13;
   wire XLXN_14;
   wire XLXN_19;
   wire XLXN_20;
   wire XLXN_21;
   wire XLXN_22;
   
   INV  XLXI_1 (.I(s[1]), 
               .O(XLXN_1));
   INV  XLXI_2 (.I(s[0]), 
               .O(XLXN_3));
   AND2  XLXI_3 (.I0(XLXN_3), 
                .I1(XLXN_1), 
                .O(XLXN_11));
   AND2  XLXI_4 (.I0(s[0]), 
                .I1(XLXN_1), 
                .O(XLXN_12));
   AND2  XLXI_5 (.I0(s[1]), 
                .I1(XLXN_3), 
                .O(XLXN_13));
   AND2  XLXI_6 (.I0(s[1]), 
                .I1(s[0]), 
                .O(XLXN_14));
   AND2  XLXI_7 (.I0(I0), 
                .I1(XLXN_11), 
                .O(XLXN_19));
   AND2  XLXI_8 (.I0(I1), 
                .I1(XLXN_12), 
                .O(XLXN_20));
   AND2  XLXI_9 (.I0(I2), 
                .I1(XLXN_13), 
                .O(XLXN_21));
   AND2  XLXI_10 (.I0(I3), 
                 .I1(XLXN_14), 
                 .O(XLXN_22));
   OR4  XLXI_11 (.I0(XLXN_22), 
                .I1(XLXN_21), 
                .I2(XLXN_20), 
                .I3(XLXN_19), 
                .O(o));
endmodule
`timescale 1ns / 1ps

module Mux4to1b4_MUSER_disp_num(I0, 
                                I1, 
                                I2, 
                                I3, 
                                s, 
                                o);

    input [3:0] I0;
    input [3:0] I1;
    input [3:0] I2;
    input [3:0] I3;
    input [1:0] s;
   output [3:0] o;
   
   wire XLXN_2;
   wire XLXN_11;
   wire XLXN_13;
   wire XLXN_14;
   wire XLXN_15;
   wire XLXN_53;
   wire XLXN_63;
   wire XLXN_65;
   wire XLXN_66;
   wire XLXN_67;
   wire XLXN_69;
   wire XLXN_70;
   wire XLXN_71;
   wire XLXN_72;
   wire XLXN_73;
   wire XLXN_74;
   wire XLXN_75;
   wire XLXN_76;
   wire XLXN_77;
   wire XLXN_78;
   wire XLXN_79;
   wire XLXN_80;
   
   INV  XLXI_1 (.I(s[1]), 
               .O(XLXN_2));
   INV  XLXI_2 (.I(s[0]), 
               .O(XLXN_11));
   AND2  XLXI_3 (.I0(XLXN_11), 
                .I1(XLXN_2), 
                .O(XLXN_13));
   AND2  XLXI_4 (.I0(s[0]), 
                .I1(XLXN_2), 
                .O(XLXN_14));
   AND2  XLXI_5 (.I0(s[1]), 
                .I1(XLXN_11), 
                .O(XLXN_15));
   AND2  XLXI_6 (.I0(s[1]), 
                .I1(s[0]), 
                .O(XLXN_53));
   AND2  XLXI_7 (.I0(I0[0]), 
                .I1(XLXN_13), 
                .O(XLXN_63));
   AND2  XLXI_8 (.I0(I1[0]), 
                .I1(XLXN_14), 
                .O(XLXN_65));
   AND2  XLXI_9 (.I0(I2[0]), 
                .I1(XLXN_15), 
                .O(XLXN_66));
   AND2  XLXI_10 (.I0(I3[0]), 
                 .I1(XLXN_53), 
                 .O(XLXN_67));
   AND2  XLXI_11 (.I0(I0[1]), 
                 .I1(XLXN_13), 
                 .O(XLXN_69));
   AND2  XLXI_12 (.I0(I1[1]), 
                 .I1(XLXN_14), 
                 .O(XLXN_70));
   AND2  XLXI_13 (.I0(I2[1]), 
                 .I1(XLXN_15), 
                 .O(XLXN_71));
   AND2  XLXI_14 (.I0(I3[1]), 
                 .I1(XLXN_53), 
                 .O(XLXN_72));
   AND2  XLXI_15 (.I0(I0[2]), 
                 .I1(XLXN_13), 
                 .O(XLXN_73));
   AND2  XLXI_16 (.I0(I1[2]), 
                 .I1(XLXN_14), 
                 .O(XLXN_74));
   AND2  XLXI_17 (.I0(I2[2]), 
                 .I1(XLXN_15), 
                 .O(XLXN_75));
   AND2  XLXI_18 (.I0(I3[2]), 
                 .I1(XLXN_53), 
                 .O(XLXN_76));
   AND2  XLXI_19 (.I0(I0[3]), 
                 .I1(XLXN_13), 
                 .O(XLXN_77));
   AND2  XLXI_20 (.I0(I1[3]), 
                 .I1(XLXN_14), 
                 .O(XLXN_78));
   AND2  XLXI_21 (.I0(I2[3]), 
                 .I1(XLXN_15), 
                 .O(XLXN_79));
   AND2  XLXI_22 (.I0(I3[3]), 
                 .I1(XLXN_53), 
                 .O(XLXN_80));
   OR4  XLXI_24 (.I0(XLXN_67), 
                .I1(XLXN_66), 
                .I2(XLXN_65), 
                .I3(XLXN_63), 
                .O(o[0]));
   OR4  XLXI_25 (.I0(XLXN_72), 
                .I1(XLXN_71), 
                .I2(XLXN_70), 
                .I3(XLXN_69), 
                .O(o[1]));
   OR4  XLXI_26 (.I0(XLXN_76), 
                .I1(XLXN_75), 
                .I2(XLXN_74), 
                .I3(XLXN_73), 
                .O(o[2]));
   OR4  XLXI_27 (.I0(XLXN_80), 
                .I1(XLXN_79), 
                .I2(XLXN_78), 
                .I3(XLXN_77), 
                .O(o[3]));
endmodule
`timescale 1ns / 1ps

module DisplaySync_MUSER_disp_num(Hexs, 
                                  LES, 
                                  point, 
                                  Scan, 
                                  AN, 
                                  HEX, 
                                  LE, 
                                  p);

    input [15:0] Hexs;
    input [3:0] LES;
    input [3:0] point;
    input [1:0] Scan;
   output [3:0] AN;
   output [3:0] HEX;
   output LE;
   output p;
   
   wire XLXN_30;
   wire XLXN_31;
   wire XLXN_32;
   wire XLXN_33;
   wire XLXN_34;
   
   Mux4to1b4_MUSER_disp_num  XLXI_1 (.I0(Hexs[3:0]), 
                                    .I1(Hexs[7:4]), 
                                    .I2(Hexs[11:8]), 
                                    .I3(Hexs[15:12]), 
                                    .s(Scan[1:0]), 
                                    .o(HEX[3:0]));
   MUX4to1_MUSER_disp_num  XLXI_7 (.I0(point[0]), 
                                  .I1(point[1]), 
                                  .I2(point[2]), 
                                  .I3(point[3]), 
                                  .s(Scan[1:0]), 
                                  .o(p));
   MUX4to1_MUSER_disp_num  XLXI_8 (.I0(LES[0]), 
                                  .I1(LES[1]), 
                                  .I2(LES[2]), 
                                  .I3(LES[3]), 
                                  .s(Scan[1:0]), 
                                  .o(LE));
   (* HU_SET = "XLXI_10_0" *) 
   D2_4E_HXILINX_disp_num  XLXI_10 (.A0(Scan[0]), 
                                   .A1(Scan[1]), 
                                   .E(XLXN_30), 
                                   .D0(XLXN_34), 
                                   .D1(XLXN_33), 
                                   .D2(XLXN_32), 
                                   .D3(XLXN_31));
   VCC  XLXI_11 (.P(XLXN_30));
   (* HU_SET = "XLXI_12_1" *) 
   INV4_HXILINX_disp_num  XLXI_12 (.I0(XLXN_31), 
                                  .I1(XLXN_32), 
                                  .I2(XLXN_33), 
                                  .I3(XLXN_34), 
                                  .O0(AN[3]), 
                                  .O1(AN[2]), 
                                  .O2(AN[1]), 
                                  .O3(AN[0]));
endmodule
`timescale 1ns / 1ps

module disp_num(clk, 
                HEXS, 
                LES, 
                points, 
                RST, 
                AN, 
                Segment);

    input clk;
    input [15:0] HEXS;
    input [3:0] LES;
    input [3:0] points;
    input RST;
   output [3:0] AN;
   output [7:0] Segment;
   
   wire [31:0] clkd;
   wire [3:0] HEX;
   wire XLXN_9;
   wire XLXN_10;
   
   clkidv  XLXI_1 (.clk(clk), 
                  .rst(RST), 
                  .clkdiv(clkd[31:0]));
   DisplaySync_MUSER_disp_num  XLXI_2 (.Hexs(HEXS[15:0]), 
                                      .LES(LES[3:0]), 
                                      .point(points[3:0]), 
                                      .Scan(clkd[18:17]), 
                                      .AN(AN[3:0]), 
                                      .HEX(HEX[3:0]), 
                                      .LE(XLXN_10), 
                                      .p(XLXN_9));
   MyMC14495_MUSER_disp_num  XLXI_3 (.D0(HEX[0]), 
                                    .D1(HEX[1]), 
                                    .D2(HEX[2]), 
                                    .D3(HEX[3]), 
                                    .LE(XLXN_10), 
                                    .point(XLXN_9), 
                                    .a(Segment[0]), 
                                    .b(Segment[1]), 
                                    .c(Segment[2]), 
                                    .d(Segment[3]), 
                                    .e(Segment[4]), 
                                    .f(Segment[5]), 
                                    .g(Segment[6]), 
                                    .p(Segment[7]));
endmodule
